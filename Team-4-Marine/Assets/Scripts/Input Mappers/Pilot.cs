//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Input Mappers/Pilot.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Pilot : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Pilot()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Pilot"",
    ""maps"": [
        {
            ""name"": ""Cockpit"",
            ""id"": ""522bbbee-0a19-456e-8380-93d05d5a3480"",
            ""actions"": [
                {
                    ""name"": ""ToManualScreen"",
                    ""type"": ""Button"",
                    ""id"": ""aaaf155f-5589-473e-b779-f1a7204f4904"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""22c77d43-25ad-4022-96e0-ad8ddf38fe40"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToManualScreen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Manual"",
            ""id"": ""ceef3b21-ae67-4999-853f-dbfc8369997b"",
            ""actions"": [
                {
                    ""name"": ""ToCockpitScreen"",
                    ""type"": ""Button"",
                    ""id"": ""7b3c07ca-0784-4998-94a6-be1d14acbdfa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PageLeft"",
                    ""type"": ""Button"",
                    ""id"": ""a5041b9a-07da-4b7f-9827-bd44519f364b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PageRight"",
                    ""type"": ""Button"",
                    ""id"": ""ff86dd9f-3746-4e95-920d-ea61c59687b3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Bookmark"",
                    ""type"": ""Value"",
                    ""id"": ""ab8db3bc-1671-4454-b858-8babe00c5192"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1c39fae7-d8fb-48d8-b2c6-fd3e52a503f0"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PageRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9783890d-bbe9-449a-b2f2-b36b229e463d"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PageLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee92fa10-9acc-48be-b9f7-f90110a457a3"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToCockpitScreen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Direction"",
                    ""id"": ""f487f00b-2313-430a-ab9d-c7fed3a17e72"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Bookmark"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9772a39f-4e27-4351-aa95-59761305a64a"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Bookmark"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1082569f-792d-42d0-9dc4-b0c4af8978ce"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Bookmark"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ea5ca1f7-ff1c-45e8-bc0a-62080ef2505a"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Bookmark"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b2dcc638-5ece-4d4e-85ac-89b255c0e615"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Bookmark"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Cockpit
        m_Cockpit = asset.FindActionMap("Cockpit", throwIfNotFound: true);
        m_Cockpit_ToManualScreen = m_Cockpit.FindAction("ToManualScreen", throwIfNotFound: true);
        // Manual
        m_Manual = asset.FindActionMap("Manual", throwIfNotFound: true);
        m_Manual_ToCockpitScreen = m_Manual.FindAction("ToCockpitScreen", throwIfNotFound: true);
        m_Manual_PageLeft = m_Manual.FindAction("PageLeft", throwIfNotFound: true);
        m_Manual_PageRight = m_Manual.FindAction("PageRight", throwIfNotFound: true);
        m_Manual_Bookmark = m_Manual.FindAction("Bookmark", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Cockpit
    private readonly InputActionMap m_Cockpit;
    private ICockpitActions m_CockpitActionsCallbackInterface;
    private readonly InputAction m_Cockpit_ToManualScreen;
    public struct CockpitActions
    {
        private @Pilot m_Wrapper;
        public CockpitActions(@Pilot wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToManualScreen => m_Wrapper.m_Cockpit_ToManualScreen;
        public InputActionMap Get() { return m_Wrapper.m_Cockpit; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CockpitActions set) { return set.Get(); }
        public void SetCallbacks(ICockpitActions instance)
        {
            if (m_Wrapper.m_CockpitActionsCallbackInterface != null)
            {
                @ToManualScreen.started -= m_Wrapper.m_CockpitActionsCallbackInterface.OnToManualScreen;
                @ToManualScreen.performed -= m_Wrapper.m_CockpitActionsCallbackInterface.OnToManualScreen;
                @ToManualScreen.canceled -= m_Wrapper.m_CockpitActionsCallbackInterface.OnToManualScreen;
            }
            m_Wrapper.m_CockpitActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ToManualScreen.started += instance.OnToManualScreen;
                @ToManualScreen.performed += instance.OnToManualScreen;
                @ToManualScreen.canceled += instance.OnToManualScreen;
            }
        }
    }
    public CockpitActions @Cockpit => new CockpitActions(this);

    // Manual
    private readonly InputActionMap m_Manual;
    private IManualActions m_ManualActionsCallbackInterface;
    private readonly InputAction m_Manual_ToCockpitScreen;
    private readonly InputAction m_Manual_PageLeft;
    private readonly InputAction m_Manual_PageRight;
    private readonly InputAction m_Manual_Bookmark;
    public struct ManualActions
    {
        private @Pilot m_Wrapper;
        public ManualActions(@Pilot wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToCockpitScreen => m_Wrapper.m_Manual_ToCockpitScreen;
        public InputAction @PageLeft => m_Wrapper.m_Manual_PageLeft;
        public InputAction @PageRight => m_Wrapper.m_Manual_PageRight;
        public InputAction @Bookmark => m_Wrapper.m_Manual_Bookmark;
        public InputActionMap Get() { return m_Wrapper.m_Manual; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ManualActions set) { return set.Get(); }
        public void SetCallbacks(IManualActions instance)
        {
            if (m_Wrapper.m_ManualActionsCallbackInterface != null)
            {
                @ToCockpitScreen.started -= m_Wrapper.m_ManualActionsCallbackInterface.OnToCockpitScreen;
                @ToCockpitScreen.performed -= m_Wrapper.m_ManualActionsCallbackInterface.OnToCockpitScreen;
                @ToCockpitScreen.canceled -= m_Wrapper.m_ManualActionsCallbackInterface.OnToCockpitScreen;
                @PageLeft.started -= m_Wrapper.m_ManualActionsCallbackInterface.OnPageLeft;
                @PageLeft.performed -= m_Wrapper.m_ManualActionsCallbackInterface.OnPageLeft;
                @PageLeft.canceled -= m_Wrapper.m_ManualActionsCallbackInterface.OnPageLeft;
                @PageRight.started -= m_Wrapper.m_ManualActionsCallbackInterface.OnPageRight;
                @PageRight.performed -= m_Wrapper.m_ManualActionsCallbackInterface.OnPageRight;
                @PageRight.canceled -= m_Wrapper.m_ManualActionsCallbackInterface.OnPageRight;
                @Bookmark.started -= m_Wrapper.m_ManualActionsCallbackInterface.OnBookmark;
                @Bookmark.performed -= m_Wrapper.m_ManualActionsCallbackInterface.OnBookmark;
                @Bookmark.canceled -= m_Wrapper.m_ManualActionsCallbackInterface.OnBookmark;
            }
            m_Wrapper.m_ManualActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ToCockpitScreen.started += instance.OnToCockpitScreen;
                @ToCockpitScreen.performed += instance.OnToCockpitScreen;
                @ToCockpitScreen.canceled += instance.OnToCockpitScreen;
                @PageLeft.started += instance.OnPageLeft;
                @PageLeft.performed += instance.OnPageLeft;
                @PageLeft.canceled += instance.OnPageLeft;
                @PageRight.started += instance.OnPageRight;
                @PageRight.performed += instance.OnPageRight;
                @PageRight.canceled += instance.OnPageRight;
                @Bookmark.started += instance.OnBookmark;
                @Bookmark.performed += instance.OnBookmark;
                @Bookmark.canceled += instance.OnBookmark;
            }
        }
    }
    public ManualActions @Manual => new ManualActions(this);
    public interface ICockpitActions
    {
        void OnToManualScreen(InputAction.CallbackContext context);
    }
    public interface IManualActions
    {
        void OnToCockpitScreen(InputAction.CallbackContext context);
        void OnPageLeft(InputAction.CallbackContext context);
        void OnPageRight(InputAction.CallbackContext context);
        void OnBookmark(InputAction.CallbackContext context);
    }
}
